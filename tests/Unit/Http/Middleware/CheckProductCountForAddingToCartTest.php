<?php

namespace Tests\Unit\Http\Middleware;

use App\Http\Middleware\CheckProductCountForAddingToCart;
use App\Repositories\ProductRepository;
use App\Repositories\ShopRepository;
use Mockery;
use Tests\TestCase;

class CheckProductCountForAddingToCartTest extends TestCase
{
    private $productCountInStock;
    private $requestedProductCount;


    public function setUp(): void
    {
        parent::setUp();

        $this->productCountInStock = 100;
        $this->requestedProductCount = 101;
    }

    public function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        Mockery::close();
    }

    /**
     * @test
     */
    public function cantAddExceededCountOfProductToCart()
    {
        $shopRepo = Mockery::mock(ShopRepository::class);
        $productRepo = Mockery::mock(ProductRepository::class);

        $middleware = new CheckProductCountForAddingToCart($shopRepo, $productRepo);
        $error_message_array = $this->invokeMethod($middleware,
            'compareProductInStockCountAndRequestedCount',
            array($this->productCountInStock, $this->requestedProductCount));

        $this->assertEquals(1, count($error_message_array));
    }


    /**
     * Call protected/private method of a class.
     *
     * @param object &$object Instantiated object that we will run method on.
     * @param string $methodName Method name to call
     * @param array $parameters Array of parameters to pass into method.
     *
     * @return mixed Method return.
     */
    public function invokeMethod(&$object, $methodName, array $parameters = array())
    {
        $reflection = new \ReflectionClass(get_class($object));
        $method = $reflection->getMethod($methodName);
        $method->setAccessible(true);

        return $method->invokeArgs($object, $parameters);
    }
}
